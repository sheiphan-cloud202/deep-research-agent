name: Deploy Lambda Function

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

# Required for OIDC authentication and for actions/checkout
permissions:
  id-token: write
  contents: read

env:
  LAMBDA_FUNCTION_NAME: deepsearch-qubitz-v1
  AWS_REGION: us-east-1
  PYTHON_VERSION: "3.11"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        # Option 1: Using AWS Access Keys (stored in GitHub Secrets)
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

        # Option 2: Using OIDC (uncomment below and comment above for better security)
        # role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        # role-session-name: GitHubActions-DeployLambda
        # aws-region: ${{ env.AWS_REGION }}

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Build and Publish Lambda Layer
      id: lambda-layer
      run: |
        echo "Building dependencies layer..."
        uv export --frozen --no-dev --no-editable --all-extras -o requirements.txt

        LAYER_DIR="python"

        # Install dependencies into a `python` directory for the Lambda Layer
        uv pip install \
          --no-installer-metadata \
          --no-compile-bytecode \
          --python-platform x86_64-manylinux2014 \
          --python ${{ env.PYTHON_VERSION }} \
          -r requirements.txt \
          --target "${LAYER_DIR}"

        # Zip the layer content
        zip -r dependencies-layer.zip "${LAYER_DIR}"

        echo "Publishing Lambda layer..."
        LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name "${{ env.LAMBDA_FUNCTION_NAME }}-dependencies" \
          --description "Dependencies for ${{ env.LAMBDA_FUNCTION_NAME }}" \
          --zip-file fileb://dependencies-layer.zip \
          --compatible-runtimes "python${{ env.PYTHON_VERSION }}" \
          --compatible-architectures "x86_64" \
          --query LayerVersionArn --output text)

        echo "layer_arn=$LAYER_ARN" >> $GITHUB_OUTPUT

    - name: Build application package
      run: |
        echo "Packaging application code..."
        zip -r lambda-deployment.zip deep_research_agent/ lambda_function.py

    - name: Check if Lambda function exists
      id: check-function
      run: |
        if aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Lambda function (if it doesn't exist)
      if: steps.check-function.outputs.exists == 'false'
      run: |
        aws lambda create-function \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --runtime python${{ env.PYTHON_VERSION }} \
          --role ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
          --handler lambda_function.lambda_handler \
          --zip-file fileb://lambda-deployment.zip \
          --layers ${{ steps.lambda-layer.outputs.layer_arn }} \
          --timeout 900 \
          --memory-size 1024 \
          --environment Variables='{
            "AWS_REGION":"${{ env.AWS_REGION }}",
            "DEFAULT_MODEL_ID":"us.anthropic.claude-3-7-sonnet-20250219-v1:0",
            "CLAUDE_SONNET_MODEL_ID":"anthropic.claude-3-5-sonnet-20240620-v1:0"
          }' \
          --description "Deep Research Agent API deployed via GitHub Actions"

    - name: Update Lambda function code (if it exists)
      if: steps.check-function.outputs.exists == 'true'
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://lambda-deployment.zip

    - name: Update Lambda function configuration
      run: |
        aws lambda update-function-configuration \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --layers ${{ steps.lambda-layer.outputs.layer_arn }} \
          --timeout 900 \
          --memory-size 1024 \
          --environment Variables='{
            "AWS_REGION":"${{ env.AWS_REGION }}",
            "DEFAULT_MODEL_ID":"us.anthropic.claude-3-7-sonnet-20250219-v1:0",
            "CLAUDE_SONNET_MODEL_ID":"anthropic.claude-3-5-sonnet-20240620-v1:0"
          }'

    - name: Wait for function update to complete
      run: |
        aws lambda wait function-updated --function-name ${{ env.LAMBDA_FUNCTION_NAME }}

    - name: Create or update function URL (for HTTP access)
      run: |
        # Try to create function URL, if it exists, this will fail but that's OK
        aws lambda create-function-url-config \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --auth-type NONE \
          --cors '{
            "AllowCredentials": false,
            "AllowHeaders": ["*"],
            "AllowMethods": ["*"],
            "AllowOrigins": ["*"],
            "ExposeHeaders": ["*"],
            "MaxAge": 3600
          }' || true

        # Get the function URL
        FUNCTION_URL=$(aws lambda get-function-url-config \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --query 'FunctionUrl' --output text)

        echo "üöÄ Lambda function deployed successfully!"
        echo "üìç Function URL: $FUNCTION_URL"
        echo "üìç Function Name: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "üìç Region: ${{ env.AWS_REGION }}"

    - name: Test the deployment
      run: |
        # Get function URL for testing
        FUNCTION_URL=$(aws lambda get-function-url-config \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --query 'FunctionUrl' --output text)

        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f "$FUNCTION_URL" || echo "Health check failed"

        echo "‚úÖ Deployment completed!"
